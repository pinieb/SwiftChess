public struct BitBoard {
    // [color][piece][position]
    private let moves: [[[Int]]] = [
        // white
        [
            // pawns
            [0, 0, 0, 0, 0, 0, 0, 0, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 4311744512, 8623489024, 17246978048, 34493956096, 68987912192, 137975824384, 275951648768, 551903297536, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992, 18014398509481984, 36028797018963968, 72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952, 4611686018427387904, -9223372036854775808, 0, 0, 0, 0, 0, 0, 0, 0],
            // knights
            [132096, 329728, 659712, 1319424, 2638848, 5277696, 10489856, 4202496, 33816580, 84410376, 168886289, 337772578, 675545156, 1351090312, 2685403152, 1075839008, 8657044482, 21609056260, 43234889992, 86469779984, 172939559968, 345879119936, 687463207040, 275414786048, 2216203387392, 5531918402560, 11068131837952, 22136263675904, 44272527351808, 88545054703616, 175990581002240, 70506185228288, 567348067172352, 1416171111055360, 2833441750515712, 5666883501031424, 11333767002062848, 22667534004125696, 45053588736573440, 18049583418441728, 145241105196122112, 362539804430172160, 725361088132022272, 1450722176264044544, 2901444352528089088, 5802888705056178176, -6913025357146750976, 4620693355121082368, 288234782788157440, 576469565576314880, 1224997824702185472, 2449995649404370944, 4899991298808741888, -8646761476092067840, 1152939646548705280, 2305878193585782784, 1128098930098176, 2256197860196352, 4793870697103360, 9587741394206720, 19175482788413440, 38350965576826880, 4644337115725824, 9007199254740992],
            // bishops
            [Int](repeating: 0, count: 64),
            // rooks
            [Int](repeating: 0, count: 64),
            // queens
            [Int](repeating: 0, count: 64),
            // kings,
            [Int](repeating: 0, count: 64),
        ],
        // black
        [
            // pawns
            [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1103806595072, 2207613190144, 4415226380288, 8830452760576, 17660905521152, 35321811042304, 70643622084608, 141287244169216, 0, 0, 0, 0, 0, 0, 0, 0],
            // knights
            [132096, 329728, 659712, 1319424, 2638848, 5277696, 10489856, 4202496, 33816580, 84410376, 168886289, 337772578, 675545156, 1351090312, 2685403152, 1075839008, 8657044482, 21609056260, 43234889992, 86469779984, 172939559968, 345879119936, 687463207040, 275414786048, 2216203387392, 5531918402560, 11068131837952, 22136263675904, 44272527351808, 88545054703616, 175990581002240, 70506185228288, 567348067172352, 1416171111055360, 2833441750515712, 5666883501031424, 11333767002062848, 22667534004125696, 45053588736573440, 18049583418441728, 145241105196122112, 362539804430172160, 725361088132022272, 1450722176264044544, 2901444352528089088, 5802888705056178176, -6913025357146750976, 4620693355121082368, 288234782788157440, 576469565576314880, 1224997824702185472, 2449995649404370944, 4899991298808741888, -8646761476092067840, 1152939646548705280, 2305878193585782784, 1128098930098176, 2256197860196352, 4793870697103360, 9587741394206720, 19175482788413440, 38350965576826880, 4644337115725824, 9007199254740992],
            // bishops
            [Int](repeating: 0, count: 64),
            // rooks
            [Int](repeating: 0, count: 64),
            // queens
            [Int](repeating: 0, count: 64),
            // kings,
            [Int](repeating: 0, count: 64),
        ],
    ]

    private var pieces: [[Int]]

    public init() {
        pieces = [[Int]](repeating: [Int](repeating: 0,
                                          count: PieceType.all.rawValue + 1),
                         count: Color.all.rawValue + 1)
    }

    private init(board: BitBoard) {
        self.pieces = board.pieces
    }

    public mutating func reset() {
        let pawns = 0b11111111
        pieces[Color.white][PieceType.pawn] = pawns << 8
        pieces[Color.black][PieceType.pawn] = pawns << (8 * 6)

        let rooks = 0b10000001
        pieces[Color.white][PieceType.rook] = rooks
        pieces[Color.black][PieceType.rook] = rooks << (8 * 7)

        let knights = 0b01000010
        pieces[Color.white][PieceType.knight] = knights
        pieces[Color.black][PieceType.knight] = knights << (8 * 7)

        let bishops = 0b00100100
        pieces[Color.white][PieceType.bishop] = bishops
        pieces[Color.black][PieceType.bishop] = bishops << (8 * 7)

        let queen = 0b00010000
        pieces[Color.white][PieceType.queen] = queen
        pieces[Color.black][PieceType.queen] = queen << (8 * 7)

        let king = 0b00001000
        pieces[Color.white][PieceType.king] = king
        pieces[Color.black][PieceType.king] = king << (8 * 7)
    }

//    public func makeMove(from: Int,
//                         to: Int,
//                         for piece: Int,
//                         of color: Int) -> BitBoard {
//        
//    }

    public func possibleMoves(for color: Color) -> [Move] {
        // for each piece of color
        // get the bitmap
        // for index of each 1 in bitmap, get moves bitmap
        // for index of each 1 in moves, add a new move to the list

        return []
    }

    private func possiblePawnMoves(for color: Color) -> [Move] {
        let movesFromSquare = [
            [
                0, 0, 0, 0, 0, 0, 0, 0,
                65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608,
                4311744512, 8623489024, 17246978048, 34493956096, 68987912192, 137975824384, 275951648768, 551903297536,
                4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888,
                1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328,
                281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992, 18014398509481984, 36028797018963968,
                72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952, 4611686018427387904, -9223372036854775808
                , 0, 0, 0, 0, 0, 0, 0, 0
            ],
            [
                0, 0, 0, 0, 0, 0, 0, 0,
                1, 2, 4, 8, 16, 32, 64, 128,
                256, 512, 1024, 2048, 4096, 8192, 16384, 32768,
                65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608,
                16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648,
                4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888,
                1103806595072, 2207613190144, 4415226380288, 8830452760576, 17660905521152, 35321811042304, 70643622084608, 141287244169216,
                0, 0, 0, 0, 0, 0, 0, 0
            ],
        ]

        let pawns = pieces[color][PieceType.pawn]

        var moves = [Move]()
        pawns.forEach { source in
            movesFromSquare[color][source].forEach { target in
                guard getOccupant(of: target) == nil else { return }

                moves.append(Move(source: source,
                                  target: target,
                                  capturedPiece: nil))
            }

            // TODO: check for captures and en passant
        }

        return moves
    }

    private func possibleKnightMoves(for color: Color) -> [Move] {
        let movesFromSquare = [
            132096, 329728, 659712, 1319424, 2638848, 5277696, 10489856, 4202496,
            33816580, 84410376, 168886289, 337772578, 675545156, 1351090312, 2685403152, 1075839008,
            8657044482, 21609056260, 43234889992, 86469779984, 172939559968, 345879119936, 687463207040, 275414786048,
            2216203387392, 5531918402560, 11068131837952, 22136263675904, 44272527351808, 88545054703616, 175990581002240, 70506185228288,
            567348067172352, 1416171111055360, 2833441750515712, 5666883501031424, 11333767002062848, 22667534004125696, 45053588736573440, 18049583418441728,
            145241105196122112, 362539804430172160, 725361088132022272, 1450722176264044544, 2901444352528089088, 5802888705056178176, -6913025357146750976, 4620693355121082368,
            288234782788157440, 576469565576314880, 1224997824702185472, 2449995649404370944, 4899991298808741888, -8646761476092067840, 1152939646548705280, 2305878193585782784,
            1128098930098176, 2256197860196352, 4793870697103360, 9587741394206720, 19175482788413440, 38350965576826880, 4644337115725824, 9007199254740992
        ]

        let knights = pieces[color][PieceType.knight]

        var moves = [Move]()
        knights.forEach { source in
            movesFromSquare[source].forEach { target in
                let targetOccupant = getOccupant(of: target)
                guard targetOccupant?.color != color else { return }

                moves.append(Move(source: source,
                                  target: target,
                                  capturedPiece: targetOccupant))
            }
        }

        return moves
    }

    private func possibleKingMoves(for color: Color) -> [Move] {
        let movesFromSquare = [
            770, 1797, 3594, 7188, 14376, 28752, 57504, 49216,
            197123, 460039, 920078, 1840156, 3680312, 7360624, 14721248, 12599488,
            50463488, 117769984, 235539968, 471079936, 942159872, 1884319744, 3768639488, 3225468928,
            12918652928, 30149115904, 60298231808, 120596463616, 241192927232, 482385854464, 964771708928, 825720045568,
            3307175149568, 7718173671424, 15436347342848, 30872694685696, 61745389371392, 123490778742784, 246981557485568, 211384331665408,
            846636838289408, 1975852459884544, 3951704919769088, 7903409839538176, 15806819679076352, 31613639358152704, 63227278716305408, 54114388906344448,
            216739030602088448, 505818229730443264, 1011636459460886528, 2023272918921773056, 4046545837843546112, 8093091675687092224, -2260560722335367168, -4593460513685372928,
            144959613005987840, 362258295026614272, 724516590053228544, 1449033180106457088, 2898066360212914176, 5796132720425828352, -6854478632857894912, 4665729213955833856
        ]

        let kings = pieces[color][PieceType.king]

        var moves = [Move]()
        kings.forEach { source in
            movesFromSquare[source].forEach { target in
                let targetOccupant = getOccupant(of: target)
                guard targetOccupant?.color != color else { return }

                // TODO: Make sure move doesn't end in check

                moves.append(Move(source: source,
                                  target: target,
                                  capturedPiece: targetOccupant))
            }

            // TODO: Check castling
        }

        return moves
    }

    private func getOccupant(of square: Int) -> Piece? {
        guard pieces[Color.all][PieceType.all][square] else { return nil }

        for color in Color.allCases {
            for pieceType in PieceType.allCases {
                guard pieces[color][pieceType][square] else { continue }

                return Piece(color: color,
                             type: pieceType)
            }
        }

        return nil
    }

    public func printBoard() {
        var row = ""
        for i in 0 ..< 64 {
            let index = 1 << (63 - i)
            if index & pieces[Color.white][PieceType.king] != 0 {
                row += "♔"
            } else if index & pieces[Color.white][PieceType.queen] != 0 {
                row += "♕"
            } else if index & pieces[Color.white][PieceType.rook] != 0 {
                row += "♖"
            } else if index & pieces[Color.white][PieceType.bishop] != 0 {
                row += "♗"
            } else if index & pieces[Color.white][PieceType.knight] != 0 {
                row += "♘"
            } else if index & pieces[Color.white][PieceType.pawn] != 0 {
                row += "♙"
            } else if index & pieces[Color.black][PieceType.king] != 0 {
                row += "♚"
            } else if index & pieces[Color.black][PieceType.queen] != 0 {
                row += "♛"
            } else if index & pieces[Color.black][PieceType.rook] != 0 {
                row += "♜"
            } else if index & pieces[Color.black][PieceType.bishop] != 0 {
                row += "♝"
            } else if index & pieces[Color.black][PieceType.knight] != 0 {
                row += "♞"
            } else if index & pieces[Color.black][PieceType.pawn] != 0 {
                row += "♟︎"
            } else {
                row += " "
            }

            if (i + 1) % 8 == 0 {
                print(row)
                row = ""
            }
        }
    }
}
