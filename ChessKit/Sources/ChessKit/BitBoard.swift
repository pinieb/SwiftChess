public struct BitBoard {
    // [color][piece][position]
    private let moves: [[[Int]]] = [
        // white
        [
            // pawns
            [0, 0, 0, 0, 0, 0, 0, 0, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 4311744512, 8623489024, 17246978048, 34493956096, 68987912192, 137975824384, 275951648768, 551903297536, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992, 18014398509481984, 36028797018963968, 72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952, 4611686018427387904, -9223372036854775808, 0, 0, 0, 0, 0, 0, 0, 0],
            // knights
            [132096, 329728, 659712, 1319424, 2638848, 5277696, 10489856, 4202496, 33816580, 84410376, 168886289, 337772578, 675545156, 1351090312, 2685403152, 1075839008, 8657044482, 21609056260, 43234889992, 86469779984, 172939559968, 345879119936, 687463207040, 275414786048, 2216203387392, 5531918402560, 11068131837952, 22136263675904, 44272527351808, 88545054703616, 175990581002240, 70506185228288, 567348067172352, 1416171111055360, 2833441750515712, 5666883501031424, 11333767002062848, 22667534004125696, 45053588736573440, 18049583418441728, 145241105196122112, 362539804430172160, 725361088132022272, 1450722176264044544, 2901444352528089088, 5802888705056178176, -6913025357146750976, 4620693355121082368, 288234782788157440, 576469565576314880, 1224997824702185472, 2449995649404370944, 4899991298808741888, -8646761476092067840, 1152939646548705280, 2305878193585782784, 1128098930098176, 2256197860196352, 4793870697103360, 9587741394206720, 19175482788413440, 38350965576826880, 4644337115725824, 9007199254740992],
            // bishops
            [Int](repeating: 0, count: 64),
            // rooks
            [Int](repeating: 0, count: 64),
            // queens
            [Int](repeating: 0, count: 64),
            // kings,
            [Int](repeating: 0, count: 64),
        ],
        // black
        [
            // pawns
            [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1103806595072, 2207613190144, 4415226380288, 8830452760576, 17660905521152, 35321811042304, 70643622084608, 141287244169216, 0, 0, 0, 0, 0, 0, 0, 0],
            // knights
            [132096, 329728, 659712, 1319424, 2638848, 5277696, 10489856, 4202496, 33816580, 84410376, 168886289, 337772578, 675545156, 1351090312, 2685403152, 1075839008, 8657044482, 21609056260, 43234889992, 86469779984, 172939559968, 345879119936, 687463207040, 275414786048, 2216203387392, 5531918402560, 11068131837952, 22136263675904, 44272527351808, 88545054703616, 175990581002240, 70506185228288, 567348067172352, 1416171111055360, 2833441750515712, 5666883501031424, 11333767002062848, 22667534004125696, 45053588736573440, 18049583418441728, 145241105196122112, 362539804430172160, 725361088132022272, 1450722176264044544, 2901444352528089088, 5802888705056178176, -6913025357146750976, 4620693355121082368, 288234782788157440, 576469565576314880, 1224997824702185472, 2449995649404370944, 4899991298808741888, -8646761476092067840, 1152939646548705280, 2305878193585782784, 1128098930098176, 2256197860196352, 4793870697103360, 9587741394206720, 19175482788413440, 38350965576826880, 4644337115725824, 9007199254740992],
            // bishops
            [Int](repeating: 0, count: 64),
            // rooks
            [Int](repeating: 0, count: 64),
            // queens
            [Int](repeating: 0, count: 64),
            // kings,
            [Int](repeating: 0, count: 64),
        ],
    ]

    private var pieces: [[Int]]

    public init() {
        pieces = [[Int]](repeating: [Int](repeating: 0,
                                          count: PieceType.all.rawValue + 1),
                         count: Color.all.rawValue + 1)
    }

    private init(board: BitBoard) {
        self.pieces = board.pieces
    }

    public mutating func reset() {
        let pawns = 0b11111111
        pieces[Color.white][PieceType.pawn] = pawns << 8
        pieces[Color.black][PieceType.pawn] = pawns << (8 * 6)

        let rooks = 0b10000001
        pieces[Color.white][PieceType.rook] = rooks
        pieces[Color.black][PieceType.rook] = rooks << (8 * 7)

        let knights = 0b01000010
        pieces[Color.white][PieceType.knight] = knights
        pieces[Color.black][PieceType.knight] = knights << (8 * 7)

        let bishops = 0b00100100
        pieces[Color.white][PieceType.bishop] = bishops
        pieces[Color.black][PieceType.bishop] = bishops << (8 * 7)

        let queen = 0b00010000
        pieces[Color.white][PieceType.queen] = queen
        pieces[Color.black][PieceType.queen] = queen << (8 * 7)

        let king = 0b00001000
        pieces[Color.white][PieceType.king] = king
        pieces[Color.black][PieceType.king] = king << (8 * 7)
    }

//    public func makeMove(from: Int,
//                         to: Int,
//                         for piece: Int,
//                         of color: Int) -> BitBoard {
//        
//    }

    public func possibleMoves(for color: Color) -> [Move] {
        var moves = [Move]()
        
        moves.append(contentsOf: possiblePawnMoves(for: color))
        moves.append(contentsOf: possibleKnightMoves(for: color))
        moves.append(contentsOf: possibleKingMoves(for: color))
        moves.append(contentsOf: possibleBishopMoves(for: color))
        moves.append(contentsOf: possibleRookMoves(for: color))

        return moves
    }

    private func possiblePawnMoves(for color: Color) -> [Move] {
        let movesFromSquare = [
            [
                0, 0, 0, 0, 0, 0, 0, 0,
                65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608,
                4311744512, 8623489024, 17246978048, 34493956096, 68987912192, 137975824384, 275951648768, 551903297536,
                4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888,
                1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328,
                281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992, 18014398509481984, 36028797018963968,
                72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952, 4611686018427387904, -9223372036854775808
                , 0, 0, 0, 0, 0, 0, 0, 0
            ],
            [
                0, 0, 0, 0, 0, 0, 0, 0,
                1, 2, 4, 8, 16, 32, 64, 128,
                256, 512, 1024, 2048, 4096, 8192, 16384, 32768,
                65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608,
                16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648,
                4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888,
                1103806595072, 2207613190144, 4415226380288, 8830452760576, 17660905521152, 35321811042304, 70643622084608, 141287244169216,
                0, 0, 0, 0, 0, 0, 0, 0
            ],
        ]

        let pawns = pieces[color][PieceType.pawn]

        var moves = [Move]()
        pawns.forEach { source in
            movesFromSquare[color][source].forEach { target in
                guard getOccupant(of: target) == nil else { return }

                moves.append(Move(source: source,
                                  target: target,
                                  capturedPiece: nil))
            }

            // TODO: check for captures and en passant
        }

        return moves
    }

    private func possibleKnightMoves2(for color: Color) -> [Move] {
        let movesFromSquare = [
            132096, 329728, 659712, 1319424, 2638848, 5277696, 10489856, 4202496,
            33816580, 84410376, 168886289, 337772578, 675545156, 1351090312, 2685403152, 1075839008,
            8657044482, 21609056260, 43234889992, 86469779984, 172939559968, 345879119936, 687463207040, 275414786048,
            2216203387392, 5531918402560, 11068131837952, 22136263675904, 44272527351808, 88545054703616, 175990581002240, 70506185228288,
            567348067172352, 1416171111055360, 2833441750515712, 5666883501031424, 11333767002062848, 22667534004125696, 45053588736573440, 18049583418441728,
            145241105196122112, 362539804430172160, 725361088132022272, 1450722176264044544, 2901444352528089088, 5802888705056178176, -6913025357146750976, 4620693355121082368,
            288234782788157440, 576469565576314880, 1224997824702185472, 2449995649404370944, 4899991298808741888, -8646761476092067840, 1152939646548705280, 2305878193585782784,
            1128098930098176, 2256197860196352, 4793870697103360, 9587741394206720, 19175482788413440, 38350965576826880, 4644337115725824, 9007199254740992
        ]

        let knights = pieces[color][PieceType.knight]

        var moves = [Move]()
        for source in 0 ..< 64 {
            guard knights & (1 << source) == 1 else { continue }

            let targets = movesFromSquare[source]
            for target in 0 ..< 64 {
                guard targets & (1 << target) == 1 else { continue }

                let targetOccupant = getOccupant(of: target)
                guard targetOccupant?.color != color else { continue }

                moves.append(Move(source: source,
                                  target: target,
                                  capturedPiece: targetOccupant))
            }
        }

        return moves
    }

    private func possibleKnightMoves(for color: Color) -> [Move] {
        let movesFromSquare = [
            132096, 329728, 659712, 1319424, 2638848, 5277696, 10489856, 4202496,
            33816580, 84410376, 168886289, 337772578, 675545156, 1351090312, 2685403152, 1075839008,
            8657044482, 21609056260, 43234889992, 86469779984, 172939559968, 345879119936, 687463207040, 275414786048,
            2216203387392, 5531918402560, 11068131837952, 22136263675904, 44272527351808, 88545054703616, 175990581002240, 70506185228288,
            567348067172352, 1416171111055360, 2833441750515712, 5666883501031424, 11333767002062848, 22667534004125696, 45053588736573440, 18049583418441728,
            145241105196122112, 362539804430172160, 725361088132022272, 1450722176264044544, 2901444352528089088, 5802888705056178176, -6913025357146750976, 4620693355121082368,
            288234782788157440, 576469565576314880, 1224997824702185472, 2449995649404370944, 4899991298808741888, -8646761476092067840, 1152939646548705280, 2305878193585782784,
            1128098930098176, 2256197860196352, 4793870697103360, 9587741394206720, 19175482788413440, 38350965576826880, 4644337115725824, 9007199254740992
        ]

        let knights = pieces[color][PieceType.knight]

        var moves = [Move]()
        knights.forEach { source in
            movesFromSquare[source].forEach { target in
                let targetOccupant = getOccupant(of: target)
                guard targetOccupant?.color != color else { return }

                moves.append(Move(source: source,
                                  target: target,
                                  capturedPiece: targetOccupant))
            }
        }

        return moves
    }

    private func possibleKingMoves(for color: Color) -> [Move] {
        let movesFromSquare = [
            770, 1797, 3594, 7188, 14376, 28752, 57504, 49216,
            197123, 460039, 920078, 1840156, 3680312, 7360624, 14721248, 12599488,
            50463488, 117769984, 235539968, 471079936, 942159872, 1884319744, 3768639488, 3225468928,
            12918652928, 30149115904, 60298231808, 120596463616, 241192927232, 482385854464, 964771708928, 825720045568,
            3307175149568, 7718173671424, 15436347342848, 30872694685696, 61745389371392, 123490778742784, 246981557485568, 211384331665408,
            846636838289408, 1975852459884544, 3951704919769088, 7903409839538176, 15806819679076352, 31613639358152704, 63227278716305408, 54114388906344448,
            216739030602088448, 505818229730443264, 1011636459460886528, 2023272918921773056, 4046545837843546112, 8093091675687092224, -2260560722335367168, -4593460513685372928,
            144959613005987840, 362258295026614272, 724516590053228544, 1449033180106457088, 2898066360212914176, 5796132720425828352, -6854478632857894912, 4665729213955833856
        ]

        let kings = pieces[color][PieceType.king]

        var moves = [Move]()
        kings.forEach { source in
            movesFromSquare[source].forEach { target in
                let targetOccupant = getOccupant(of: target)
                guard targetOccupant?.color != color else { return }

                // TODO: Make sure move doesn't end in check

                moves.append(Move(source: source,
                                  target: target,
                                  capturedPiece: targetOccupant))
            }

            // TODO: Check castling
        }

        return moves
    }

    private func possibleBishopMoves(for color: Color) -> [Move] {
        let movesFromSquare = [
            [-9205322385119247872, 36099303471055872, 141012904183808, 550831656960, 2151686144, 8404992, 32768, 0, 4620710844295151616, -9205322385119248384, 36099303471054848, 141012904181760, 550831652864, 2151677952, 8388608, 0, 2310355422147510272, 4620710844295020544, -9205322385119510528, 36099303470530560, 141012903133184, 550829555712, 2147483648, 0, 1155177711056977920, 2310355422113955840, 4620710844227911680, -9205322385253728256, 36099303202095104, 141012366262272, 549755813888, 0, 577588851233521664, 1155177702467043328, 2310355404934086656, 4620710809868173312, -9205322453973204992, 36099165763141632, 140737488355328, 0, 288793326105133056, 577586652210266112, 1155173304420532224, 2310346608841064448, 4620693217682128896, -9205357638345293824, 36028797018963968, 0, 144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952, 4611686018427387904, -9223372036854775808, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 256, 66048, 16909312, 4328785920, 1108169199616, 283691315109888, 72624976668147712, 0, 65536, 16908288, 4328783872, 1108169195520, 283691315101696, 72624976668131328, 145249953336262656, 0, 16777216, 4328521728, 1108168671232, 283691314053120, 72624976666034176, 145249953332068352, 290499906664136704, 0, 4294967296, 1108101562368, 283691179835392, 72624976397598720, 145249952795197440, 290499905590394880, 580999811180789760, 0, 1099511627776, 283673999966208, 72624942037860352, 145249884075720704, 290499768151441408, 580999536302882816, 1161999072605765632, 0, 281474976710656, 72620543991349248, 145241087982698496, 290482175965396992, 580964351930793984, 1161928703861587968, 2323857407723175936, 0, 72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952, 4611686018427387904, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4, 8, 16, 32, 64, 0, 256, 513, 1026, 2052, 4104, 8208, 16416, 0, 65536, 131328, 262657, 525314, 1050628, 2101256, 4202512, 0, 16777216, 33619968, 67240192, 134480385, 268960770, 537921540, 1075843080, 0, 4294967296, 8606711808, 17213489152, 34426978560, 68853957121, 137707914242, 275415828484, 0, 1099511627776, 2203318222848, 4406653222912, 8813306511360, 17626613022976, 35253226045953, 70506452091906, 0, 281474976710656, 564049465049088, 1128103225065472, 2256206466908160, 4512412933881856, 9024825867763968, 18049651735527937], [0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 8, 16, 32, 64, 128, 0, 516, 1032, 2064, 4128, 8256, 16512, 32768, 0, 132104, 264208, 528416, 1056832, 2113664, 4227072, 8388608, 0, 33818640, 67637280, 135274560, 270549120, 541097984, 1082130432, 2147483648, 0, 8657571872, 17315143744, 34630287488, 69260574720, 138521083904, 277025390592, 549755813888, 0, 2216338399296, 4432676798592, 8865353596928, 17730707128320, 35461397479424, 70918499991552, 140737488355328, 0, 567382630219904, 1134765260439552, 2269530520813568, 4539061024849920, 9078117754732544, 18155135997837312, 36028797018963968, 0]
        ]

        let bishops = pieces[color][PieceType.bishop]

        var moves = [Move]()
        bishops.forEach { source in
            for direction in 0 ..< 4 {
                let blockedSquares = pieces[Color.all][PieceType.all] & movesFromSquare[direction][source]

                var firstHit: Int?
                if direction < 2 {
                    firstHit = blockedSquares.first
                } else {
                    firstHit = blockedSquares.last
                }

                var availableSquares = movesFromSquare[direction][source]
                if let firstHit = firstHit {
                    availableSquares ^= movesFromSquare[direction][(1 << firstHit)]
                }

                availableSquares.forEach { target in
                    let targetOccupant = getOccupant(of: target)
                    guard targetOccupant?.color != color else { return }

                    moves.append(Move(source: source,
                                      target: target,
                                      capturedPiece: targetOccupant))
                }
            }
        }

        return moves
    }

    private func possibleRookMoves(for color: Color) -> [Move] {
        let movesFromSquare = [
            [254, 252, 248, 240, 224, 192, 128, 0, 65024, 64512, 63488, 61440, 57344, 49152, 32768, 0, 16646144, 16515072, 16252928, 15728640, 14680064, 12582912, 8388608, 0, 4261412864, 4227858432, 4160749568, 4026531840, 3758096384, 3221225472, 2147483648, 0, 1090921693184, 1082331758592, 1065151889408, 1030792151040, 962072674304, 824633720832, 549755813888, 0, 279275953455104, 277076930199552, 272678883688448, 263882790666240, 246290604621824, 211106232532992, 140737488355328, 0, 71494644084506624, 70931694131085312, 69805794224242688, 67553994410557440, 63050394783186944, 54043195528445952, 36028797018963968, 0, -144115188075855872, -288230376151711744, -576460752303423488, -1152921504606846976, -2305843009213693952, -4611686018427387904, -9223372036854775808, 0], [72340172838076672, 144680345676153344, 289360691352306688, 578721382704613376, 1157442765409226752, 2314885530818453504, 4629771061636907008, -9187201950435737600, 72340172838076416, 144680345676152832, 289360691352305664, 578721382704611328, 1157442765409222656, 2314885530818445312, 4629771061636890624, -9187201950435770368, 72340172838010880, 144680345676021760, 289360691352043520, 578721382704087040, 1157442765408174080, 2314885530816348160, 4629771061632696320, -9187201950444158976, 72340172821233664, 144680345642467328, 289360691284934656, 578721382569869312, 1157442765139738624, 2314885530279477248, 4629771060558954496, -9187201952591642624, 72340168526266368, 144680337052532736, 289360674105065472, 578721348210130944, 1157442696420261888, 2314885392840523776, 4629770785681047552, -9187202502347456512, 72339069014638592, 144678138029277184, 289356276058554368, 578712552117108736, 1157425104234217472, 2314850208468434944, 4629700416936869888, -9187343239835811840, 72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952, 4611686018427387904, -9223372036854775808, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 3, 7, 15, 31, 63, 127, 0, 256, 768, 1792, 3840, 7936, 16128, 32512, 0, 65536, 196608, 458752, 983040, 2031616, 4128768, 8323072, 0, 16777216, 50331648, 117440512, 251658240, 520093696, 1056964608, 2130706432, 0, 4294967296, 12884901888, 30064771072, 64424509440, 133143986176, 270582939648, 545460846592, 0, 1099511627776, 3298534883328, 7696581394432, 16492674416640, 34084860461056, 69269232549888, 139637976727552, 0, 281474976710656, 844424930131968, 1970324836974592, 4222124650659840, 8725724278030336, 17732923532771328, 35747322042253312, 0, 72057594037927936, 216172782113783808, 504403158265495552, 1080863910568919040, 2233785415175766016, 4539628424389459968, 9151314442816847872], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4, 8, 16, 32, 64, 128, 257, 514, 1028, 2056, 4112, 8224, 16448, 32896, 65793, 131586, 263172, 526344, 1052688, 2105376, 4210752, 8421504, 16843009, 33686018, 67372036, 134744072, 269488144, 538976288, 1077952576, 2155905152, 4311810305, 8623620610, 17247241220, 34494482440, 68988964880, 137977929760, 275955859520, 551911719040, 1103823438081, 2207646876162, 4415293752324, 8830587504648, 17661175009296, 35322350018592, 70644700037184, 141289400074368, 282578800148737, 565157600297474, 1130315200594948, 2260630401189896, 4521260802379792, 9042521604759584, 18085043209519168, 36170086419038336]
        ]

        let rooks = pieces[color][PieceType.rook]

        var moves = [Move]()
        rooks.forEach { source in
            for direction in 0 ..< 4 {
                let blockedSquares = pieces[Color.all][PieceType.all] & movesFromSquare[direction][source]

                var firstHit: Int?
                if direction < 2 {
                    firstHit = blockedSquares.first
                } else {
                    firstHit = blockedSquares.last
                }

                var availableSquares = movesFromSquare[direction][source]
                if let firstHit = firstHit {
                    availableSquares ^= movesFromSquare[direction][(1 << firstHit)]
                }

                availableSquares.forEach { target in
                    let targetOccupant = getOccupant(of: target)
                    guard targetOccupant?.color != color else { return }

                    moves.append(Move(source: source,
                                      target: target,
                                      capturedPiece: targetOccupant))
                }
            }
        }

        return moves
    }

    private func getOccupant(of square: Int) -> Piece? {
        guard pieces[Color.all][PieceType.all][square] else { return nil }

        for color in Color.allCases {
            for pieceType in PieceType.allCases {
                guard pieces[color][pieceType][square] else { continue }

                return Piece(color: color,
                             type: pieceType)
            }
        }

        return nil
    }

    public func printBoard() {
        var row = ""
        for i in 0 ..< 64 {
            let index = 1 << (63 - i)
            if index & pieces[Color.white][PieceType.king] != 0 {
                row += "♔"
            } else if index & pieces[Color.white][PieceType.queen] != 0 {
                row += "♕"
            } else if index & pieces[Color.white][PieceType.rook] != 0 {
                row += "♖"
            } else if index & pieces[Color.white][PieceType.bishop] != 0 {
                row += "♗"
            } else if index & pieces[Color.white][PieceType.knight] != 0 {
                row += "♘"
            } else if index & pieces[Color.white][PieceType.pawn] != 0 {
                row += "♙"
            } else if index & pieces[Color.black][PieceType.king] != 0 {
                row += "♚"
            } else if index & pieces[Color.black][PieceType.queen] != 0 {
                row += "♛"
            } else if index & pieces[Color.black][PieceType.rook] != 0 {
                row += "♜"
            } else if index & pieces[Color.black][PieceType.bishop] != 0 {
                row += "♝"
            } else if index & pieces[Color.black][PieceType.knight] != 0 {
                row += "♞"
            } else if index & pieces[Color.black][PieceType.pawn] != 0 {
                row += "♟︎"
            } else {
                row += " "
            }

            if (i + 1) % 8 == 0 {
                print(row)
                row = ""
            }
        }
    }
}
